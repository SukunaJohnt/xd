
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Ready"):FireServer()
    
    local function GetPlacePrice(TowerID)
        for i,v in pairs(game:GetService("Players").LocalPlayer.Units[TowerID]:GetChildren()) do
            if v.Name == "Price" then
        return v.Value
            end
        end
    end 

    local str = game:GetService("Players").LocalPlayer.PlayerGui.Select.UnitInfoFrame.UpGrade.Upgrade.Text
    local numberFromString = string.match(str, "%d+")
    local number = tonumber(numberFromString) 

    local startTime = tick()
    local towerRecord = {}
    local httpService = game:GetService("HttpService")
    local mt = getrawmetatable(game)
    local oldNamecall = mt.__namecall
    setreadonly(mt, false)
    mt.__namecall = newcclosure(function(self, ...)
        args = {...}
        if getnamecallmethod() == "FireServer" and tostring(self) == "CreateUnits" then
            towerRecord[#towerRecord + 1] = {
                ["time"] = tick() - startTime; 
                ["character"] = args[1]; 
                ["position"] = tostring(args[2]); 
                ["unitid"] = tostring(args[4]);
                ["type"] = "CreateUnit";
                ["moneyreq"] = tostring(GetPlacePrice(tostring(args[4])));
            }    
        elseif getnamecallmethod() == "FireServer" and tostring(self) == "Upgrades" then
            towerRecord[#towerRecord + 1] = {
                ["time"] = tick() - startTime; 
                ["character"] = args[1].Name; 
                ["type"] = "UpgradeUnit";
                ["moneyreq"] = number;
            }    
        elseif getnamecallmethod() == "FireServer" and tostring(self) == "SellUnit" then
            towerRecord[#towerRecord + 1] = {
                ["time"] = tick() - startTime; 
                ["character"] = args[1].Name; 
                ["type"] = "SellUnit";
            }    
        end
    
        return oldNamecall(self, unpack(args))
    end)
    setreadonly(mt, true)
    
    spawn(function()
    while task.wait() do 
        writefile("t.txt", httpService:JSONEncode(towerRecord))
        end
    end)
